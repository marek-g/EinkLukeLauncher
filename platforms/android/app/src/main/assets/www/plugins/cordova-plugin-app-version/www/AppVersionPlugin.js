cordova.define("cordova-plugin-app-version.AppVersionPlugin",function(require,exports,module){"use strict";function getPromisedCordovaExec(command,success,fail){var toReturn,deferred;if(void 0===success)if(window.jQuery)deferred=jQuery.Deferred(),success=deferred.resolve,fail=deferred.reject,toReturn=deferred;else if(window.angular)deferred=angular.injector(["ng"]).get("$q").defer(),success=deferred.resolve,fail=deferred.reject,toReturn=deferred.promise;else if(window.when&&window.when.promise)deferred=when.defer(),success=deferred.resolve,fail=deferred.reject,toReturn=deferred.promise;else if(window.Promise)toReturn=new Promise(function(c,e){success=c,fail=e});else{if(!window.WinJS||!window.WinJS.Promise)return;toReturn=new WinJS.Promise(function(c,e){success=c,fail=e})}return cordova.exec(success,fail,"AppVersion",command,[]),toReturn}function getAppVersion(success,fail){return getPromisedCordovaExec("getVersionNumber",success,fail)}getAppVersion.getAppName=function(success,fail){return getPromisedCordovaExec("getAppName",success,fail)},getAppVersion.getPackageName=function(success,fail){return getPromisedCordovaExec("getPackageName",success,fail)},getAppVersion.getVersionNumber=function(success,fail){return getPromisedCordovaExec("getVersionNumber",success,fail)},getAppVersion.getVersionCode=function(success,fail){return getPromisedCordovaExec("getVersionCode",success,fail)},module.exports=getAppVersion});